{"version":3,"sources":["GlobalStyle.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","routes.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/FetchExampleTasksButton/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","Theme.js"],"names":["GlobalStyle","createGlobalStyle","StyledForm","styled","form","Fieldset","fieldset","theme","breakpoints","small","FormButton","button","colors","buttonsColor","buttonsColorHover","buttonsActive","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","loading","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectLoading","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","input","primaryColor","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","Input","ref","value","required","placeholder","onChange","target","activeClassName","StyledLink","NavLink","attrs","white","List","ul","Item","li","hidden","css","Content","span","Button","toggleDone","doneIconColor","doneIconColorHover","doneIconColorActive","remove","deleteIconColor","deleteIconColorHover","deleteIconColorActive","toTask","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TaskList","query","searchQueryParamName","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","Wrapper","div","buttonsColorDisabled","Buttons","areTasksEmpty","isEveryTaskDone","disabled","section","Header","header","SectionTitle","h2","Paragraph","Section","title","body","extraHeaderContent","Main","Container","children","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","FetchExampleTasksButton","Search","TaskPage","useParams","find","getTaskById","StyledNavLink","Navigation","path","AuthorPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleWare","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","buttonsColorActive","App","document","getElementById"],"mappings":"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","file":"static/js/main.81a29e99.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, ::after, ::before {\n    box-sizing: inherit;\n  }\n\n  body {\n    display: flex;\n    flex-direction: column;\n    font-family: \"Montserrat\", sans-serif;\n    background-color: rgb(235, 235, 235);\n  }\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    max-width: 1080px;\r\n`;\r\n\r\nexport const Fieldset = styled.fieldset`\r\n    margin: 0 auto;\r\n    border: none;\r\n    display: flex;\r\n    padding: 20px;\r\n    background-color: white;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        padding: 5px;\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    background-color: ${({ theme }) => theme.colors.buttonsColor};\r\n    color: white;\r\n    padding: 10px;\r\n    border: none;\r\n    cursor: pointer;\r\n    flex-shrink: 0;\r\n    transition: background-color 0.5s, transform 0.5s;\r\n    \r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.colors.buttonsColorHover};\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        background-color: ${({ theme }) => theme.colors.buttonsActive};\r\n    }\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        flex-basis: 100%;\r\n        margin: 5px 0px;\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: state => {\r\n            state.loading = true;\r\n        },\r\n        fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        },\r\n        fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    fetchExampleTasksSuccess,\r\n    fetchExampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return tasks.filter(({ content }) =>\r\n        content.toUpperCase().includes(query.trim().toUpperCase()));\r\n\r\n}\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    flex-grow:1;\r\n    margin-right: 10px;\r\n    padding: 10px;\r\n    color: black;\r\n    border: 1px solid ${({ theme }) => theme.colors.primaryColor};\r\n    outline-color: ${({ theme }) => theme.colors.buttonsColor};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        margin: 0 0 10px;\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StyledForm, Fieldset, FormButton } from \"./styled\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport Input from \"../../Input\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Fieldset>\r\n                <Input\r\n                    ref={inputRef}\r\n                    value={newTaskContent}\r\n                    required\r\n                    placeholder=\"Co jest do zrobienia?\"\r\n                    onChange={({ target }) => setNewTaskContent(target.value)}\r\n                />\r\n                <FormButton>\r\n                    Dodaj zadanie\r\n                </FormButton>\r\n            </Fieldset>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"link-active\";\r\n\r\nexport const StyledLink = styled(NavLink).attrs(() => ({\r\n  activeClassName,\r\n}))`\r\n  color: ${({ theme }) => theme.colors.white};\r\n  text-decoration: none;\r\n\r\n  &.${activeClassName} {\r\n    font-weight: bold;\r\n  }\r\n\r\n  &:hover {\r\n    border-bottom: 2px solid;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 20px 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: flex;\r\n    padding: 10px 10px;\r\n    align-items: center;\r\n    border-bottom: 1px solid rgb(235, 235, 235);\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    word-break: break-word;\r\n    flex-grow: 1;\r\n    \r\n    ${({ done }) => done && css`\r\n        text-decoration-line: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    height: 30px;\r\n    width: 30px;\r\n    margin: 0 10px;\r\n    border: none;\r\n    color: white;\r\n    flex-shrink: 0;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.colors.doneIconColor};\r\n\r\n        &:hover {\r\n        background-color: ${({ theme }) => theme.colors.doneIconColorHover};\r\n        transition: .5s ease-out;\r\n        }\r\n\r\n        &:active {\r\n        background-color: ${({ theme }) => theme.colors.doneIconColorActive};\r\n        transition: .5s ease-out;\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.deleteIconColor};\r\n    \r\n        &:hover {\r\n        background-color: ${({ theme }) => theme.colors.deleteIconColorHover};\r\n        transition: .5s ease-out;\r\n        }\r\n\r\n        &:active {\r\n        background-color: ${({ theme }) => theme.colors.deleteIconColorActive};\r\n        transition: .5s ease-out;\r\n        }    \r\n    `}\r\n`;","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/autor\";\r\n\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/zadania/${id}`;","export default \"szukaj\";","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = key => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  return ({ key, value }) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    if (value === undefined) {\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n\r\n    const newSearch = searchParams.toString();\r\n    history.push(`${location.pathname}?${newSearch}`);\r\n  }\r\n};","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button, StyledLink } from \"./styled\";\r\nimport { toTask } from \"../../../../routes\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter } from \"../queryParameters\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <StyledLink to={toTask({ id: task.id })}>\r\n                            {task.content}\r\n                        </StyledLink>\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑️\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport default styled.button`\r\n    background: transparent;\r\n    color: ${({ theme }) => theme.colors.primaryColor};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: filter 0.5s;\r\n    cursor: pointer;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px 0;\r\n    }\r\n    \r\n    &:hover{\r\n        color: ${({ theme }) => theme.colors.buttonsColorHover};\r\n    }\r\n\r\n    &:disabled{\r\n        color: ${({ theme }) => theme.colors.buttonsColorDisabled}\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    selectAreTasksEmpty,\r\n    selectHideDone,\r\n    selectIsEveryTaskDone,\r\n    toggleHideDone,\r\n    setAllDone,\r\n} from \"../../tasksSlice\";\r\nimport { Wrapper } from \"./styled\";\r\nimport Button from \"../Button\"\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 0 auto;\r\n    background-color: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid rgb(235, 235, 235);\r\n    padding: 20px;\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    margin: 0;\r\n    font-size: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n    text-align: center;\r\n    margin-left: 0;\r\n    }\r\n`;\r\n\r\nexport const Paragraph = styled.div`\r\n    padding: 10px;\r\n    margin: 0 auto;\r\n`;","import { Wrapper, Header, SectionTitle, Paragraph } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      <SectionTitle>{title}</SectionTitle>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Paragraph>\r\n    {body}\r\n    </Paragraph>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.div`\r\n    margin: 0 auto;\r\n    padding: 30px;\r\n    max-width: 1080px;\r\n`;","import { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import Input from \"../../Input\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { Fieldset } from \"../Form/styled\";\r\n\r\nexport default () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({target}) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() !== \"\" ? target.value : undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fieldset>\r\n    <Input\r\n      placeholder=\"Filtruj zadania\"\r\n      value={query || \"\"}\r\n      onChange={onInputChange}\r\n    />\r\n    </Fieldset>\r\n  )\r\n};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\nimport Button from \"../Button\";\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(selectLoading);\r\n\r\n  return (\r\n    <Button disabled={loading} onClick={() => dispatch(fetchExampleTasks())}>\r\n      {\r\n        loading\r\n          ? \"Ładowanie...\"\r\n          : \"Pobierz przykładowe zadania\"\r\n      }\r\n    </Button>\r\n  );\r\n};","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport Search from \"./Search\";\nimport FetchExampleTasksButton from \"./FetchExampleTasksButton\";\n\n\nfunction TasksPage() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n        extraHeaderContent={<FetchExampleTasksButton />}\n      />\n      <Section\n        title=\"Wyszukiwarka\"\n        body={<Search />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList />}\n        extraHeaderContent={<Buttons />}\n      />\n    </Container>\n  );\n}\n\nexport default TasksPage;\n","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\n\r\nfunction TaskPage() {\r\n  const { id } = useParams();\r\n  const task = useSelector(state => getTaskById(state, id))\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      <Section\r\n        title={task ? task.content : \"Nie znaleziono zadania 👀\"}\r\n        body={!!task && (\r\n          <><strong>Ukończono:</strong> {task.done ? \"Tak\" : \"Nie\"}</>\r\n        )}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TaskPage;","import Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\nimport { Paragraph } from \"../../common/Section/styled\";\r\n\r\nexport default () => (\r\n  <Container>\r\n    <Header title=\"O Autorze\" />\r\n    <Section\r\n      title=\"Mikołaj Pawłowski\"\r\n      body={\r\n        <>\r\n        <Paragraph>\r\n          <strong>Autor ćwiczy tworzenie podstron w React-Route.</strong> \r\n        </Paragraph>\r\n        <Paragraph>\r\n          Tutaj widnieje przykładowy tekst, powstały w trakcie uczestnictwa w kursie <em>JavaScript od podstaw</em>.\r\n        </Paragraph>\r\n        </>\r\n      }\r\n    />\r\n  </Container>\r\n);","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"link-active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n  activeClassName,\r\n}))`\r\n  color: ${({ theme }) => theme.colors.white};\r\n  text-decoration: none;\r\n\r\n  &.${activeClassName} {\r\n    font-weight: bold;\r\n  }\r\n\r\n  &:hover {\r\n    border-bottom: 2px solid;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    background: ${({ theme }) => theme.colors.primaryColor};\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    margin: 20px;\r\n`;","import { toAuthor, toTasks } from \"../routes\";\r\nimport { List, Item, StyledNavLink } from \"./styled\";\r\n\r\nexport default () => {\r\n  return (\r\n    <nav>\r\n      <List>\r\n        <Item>\r\n          <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\r\n        </Item>\r\n        <Item>\r\n          <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n        </Item>\r\n      </List>\r\n    </nav>\r\n  );\r\n};","import { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport TasksPage from \"./features/tasks/TasksPage/\";\r\nimport TaskPage from \"./features/tasks/TaskPage/\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nexport default () => (\r\n  <HashRouter>\r\n    <Navigation />\r\n\r\n    <Switch>\r\n      <Route path={toTask()}>\r\n        <TaskPage />\r\n      </Route>\r\n      <Route path={toTasks()}>\r\n        <TasksPage />\r\n      </Route>\r\n      <Route path={toAuthor()}>\r\n        <AuthorPage />\r\n      </Route>\r\n      <Route>\r\n        <Redirect to={toTasks()} />\r\n      </Route>\r\n    </Switch>\r\n  </HashRouter>\r\n);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error((await response).statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, takeEvery, call, put, delay, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, selectTasks, fetchExampleTasksSuccess, fetchExampleTasksError } from \"./tasksSlice\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, \"Coś poszło nie tak, jak powinno!👀\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks)\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler)\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleWare = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleWare],\r\n});\r\n\r\nsagaMiddleWare.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./Theme.js\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        white: \"white\",\r\n        primaryColor: \"teal\",\r\n        buttonsColor: \"teal\",\r\n        buttonsColorHover: \"rgb(0, 175, 175)\",\r\n        buttonsColorActive: \"rgb(0, 200, 200)\",\r\n        buttonsColorDisabled: \"rgb(190, 190, 190)\",\r\n        doneIconColor: \"green\",\r\n        doneIconColorHover: \"rgb(0, 190, 0)\",\r\n        doneIconColorActive: \"rgb(0, 220, 0)\",\r\n        deleteIconColor: \"red\",\r\n        deleteIconColorHover: \"rgb(252, 30, 30)\",\r\n        deleteIconColorActive: \"rgb(255, 60, 60)\",\r\n    },\r\n    breakpoints: {\r\n        small: 767,\r\n    }\r\n};"],"sourceRoot":""}