{"version":3,"sources":["GlobalStyle.js","Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","useTasks.js","useLocalStorage.js","App.js","reportWebVitals.js","index.js","Theme.js"],"names":["GlobalStyle","createGlobalStyle","StyledForm","styled","form","Fieldset","fieldset","theme","breakpoints","small","Input","input","colors","primaryColor","buttonsColor","FormButton","button","buttonsColorHover","buttonsActive","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","current","focus","ref","value","required","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","done","Button","toggleDone","doneIconColor","doneIconColorHover","doneIconColorActive","remove","deleteIconColor","deleteIconColorHover","deleteIconColorActive","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","onClick","id","content","Wrapper","div","buttonsColorDisabled","Buttons","toggleHideDone","setAllDone","length","disabled","every","section","Header","header","SectionTitle","h2","Section","title","body","extraHeaderContent","Main","Container","children","useTasks","keyName","initialValue","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","useLocalStorage","setTasks","filter","App","setHideDone","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","buttonsColorActive","document","getElementById"],"mappings":"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","file":"static/js/main.ed58e5bd.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, ::after, ::before {\n    box-sizing: inherit;\n  }\n\n  body {\n    display: flex;\n    flex-direction: column;\n    font-family: \"Montserrat\", sans-serif;\n    background-color: rgb(235, 235, 235);\n  }\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    max-width: 1080px;\r\n`;\r\n\r\nexport const Fieldset = styled.fieldset`\r\n    margin: 0 auto;\r\n    border: none;\r\n    display: flex;\r\n    padding: 20px;\r\n    background-color: white;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        padding: 5px;\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    flex-grow:1;\r\n    margin-right: 10px;\r\n    padding: 10px;\r\n    color: black;\r\n    border: 1px solid ${({ theme }) => theme.colors.primaryColor};\r\n    outline-color: ${({ theme }) => theme.colors.buttonsColor};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        margin: 0 0 10px;\r\n    }\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    background-color: ${({ theme }) => theme.colors.buttonsColor};\r\n    color: white;\r\n    padding: 10px;\r\n    border: none;\r\n    cursor: pointer;\r\n    flex-shrink: 0;\r\n    transition: background-color 0.5s, transform 0.5s;\r\n    \r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.colors.buttonsColorHover};\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        background-color: ${({ theme }) => theme.colors.buttonsActive};\r\n    }\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        flex-basis: 100%;\r\n        margin: 5px 0px;\r\n    }\r\n`;","import React, { useState, useRef } from \"react\";\r\nimport { StyledForm, Fieldset, Input, FormButton } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        addNewTask(trimmedNewTaskContent);\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    }\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Fieldset>\r\n                <Input\r\n                    ref={inputRef}\r\n                    value={newTaskContent}\r\n                    required\r\n                    placeholder=\"Co jest do zrobienia?\"\r\n                    onChange={({ target }) => setNewTaskContent(target.value)}\r\n                />\r\n                <FormButton>\r\n                    Dodaj zadanie\r\n                </FormButton>\r\n            </Fieldset>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 20px 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: flex;\r\n    padding: 10px 10px;\r\n    align-items: center;\r\n    border-bottom: 1px solid rgb(235, 235, 235);\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    word-break: break-word;\r\n    flex-grow: 1;\r\n    \r\n    ${({ done }) => done && css`\r\n        text-decoration-line: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    height: 30px;\r\n    width: 30px;\r\n    margin: 0 10px;\r\n    border: none;\r\n    color: white;\r\n    flex-shrink: 0;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.colors.doneIconColor};\r\n\r\n        &:hover {\r\n        background-color: ${({ theme }) => theme.colors.doneIconColorHover};\r\n        transition: .5s ease-out;\r\n        }\r\n\r\n        &:active {\r\n        background-color: ${({ theme }) => theme.colors.doneIconColorActive};\r\n        transition: .5s ease-out;\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.deleteIconColor};\r\n    \r\n        &:hover {\r\n        background-color: ${({ theme }) => theme.colors.deleteIconColorHover};\r\n        transition: .5s ease-out;\r\n        }\r\n\r\n        &:active {\r\n        background-color: ${({ theme }) => theme.colors.deleteIconColorActive};\r\n        transition: .5s ease-out;\r\n        }    \r\n    `}\r\n`;","import { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item\r\n                key={task.id}\r\n                hidden={task.done && hideDone}\r\n            >\r\n                <Button\r\n                    toggleDone\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"✓\" : \"\"}\r\n                </Button>\r\n                <Content\r\n                    done={task.done}>\r\n                    {task.content}\r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    🗑️\r\n                </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n);\r\n\r\nexport default Tasks;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.colors.primaryColor};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    outline: none;\r\n    transition: color .5s ease-out;\r\n    cursor: pointer;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px 0;\r\n    }\r\n    \r\n    &:hover{\r\n        color: ${({ theme }) => theme.colors.buttonsColorHover};\r\n    }\r\n\r\n    &:disabled{\r\n        color: ${({ theme }) => theme.colors.buttonsColorDisabled}\r\n    }\r\n`;","import React from \"react\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <Wrapper>\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <Button onClick={toggleHideDone}>\r\n                    {hideDone ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\r\n                </Button>\r\n                <Button\r\n                    onClick={setAllDone}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Ukończ wszystkie\r\n                </Button>\r\n            </>\r\n        )}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin-bottom: 10px 0;\r\n    background-color: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid rgb(235, 235, 235);\r\n    padding: 20px;\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    margin: 0;\r\n    font-size: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n    text-align: center;\r\n    margin-left: 0;\r\n    }\r\n`;","import { Wrapper, Header, SectionTitle } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      <SectionTitle>{title}</SectionTitle>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    {body}\r\n  </Wrapper>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.div`\r\n    margin: 0 auto;\r\n    padding: 30px;\r\n    max-width: 1080px;\r\n`;","import { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import { useLocalStorage } from \"./useLocalStorage\";\r\n\r\nexport const useTasks = () => {\r\n    const [tasks, setTasks] = useLocalStorage(\"tasks\", []);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            }\r\n\r\n            return task;\r\n        }));\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask,\r\n    };\r\n};","import { useState, useEffect } from \"react\";\r\n\r\nexport const useLocalStorage = (keyName, initialValue) => {\r\n    const getInitialState = () => {\r\n        const localStorageTasks = localStorage.getItem(keyName);\r\n        if (localStorageTasks === null) {\r\n            return initialValue;\r\n        }\r\n\r\n        return JSON.parse(localStorage.getItem(keyName))\r\n    }\r\n\r\n\r\n    const [state, setState] = useState(getInitialState);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(keyName, JSON.stringify(state));\r\n    }, [state, keyName]);\r\n\r\n    return [state, setState];\r\n\r\n};","import { useState } from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useTasks } from \"./useTasks\";\n\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask,\n  } = useTasks();\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"./Theme.js\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        primaryColor: \"teal\",\r\n        buttonsColor: \"teal\",\r\n        buttonsColorHover: \"rgb(0, 175, 175)\",\r\n        buttonsColorActive: \"rgb(0, 200, 200)\",\r\n        buttonsColorDisabled: \"rgb(190, 190, 190)\",\r\n        doneIconColor: \"green\",\r\n        doneIconColorHover: \"rgb(0, 190, 0)\",\r\n        doneIconColorActive: \"rgb(0, 220, 0)\",\r\n        deleteIconColor: \"red\",\r\n        deleteIconColorHover: \"rgb(252, 30, 30)\",\r\n        deleteIconColorActive: \"rgb(255, 60, 60)\",\r\n    },\r\n    breakpoints: {\r\n        small: 767,\r\n    }\r\n};"],"sourceRoot":""}