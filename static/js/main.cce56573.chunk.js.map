{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js","Theme.js"],"names":["GlobalStyle","createGlobalStyle","StyledForm","styled","form","Fieldset","fieldset","theme","breakpoints","small","Input","input","colors","primaryColor","buttonsColor","FormButton","button","buttonsColorHover","buttonsActive","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","value","required","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","Button","toggleDone","doneIconColor","doneIconColorHover","doneIconColorActive","remove","deleteIconColor","deleteIconColorHover","deleteIconColorActive","TaskList","useSelector","map","onClick","Wrapper","div","buttonsColorDisabled","Buttons","areTasksEmpty","isEveryTaskDone","disabled","section","Header","header","SectionTitle","h2","Section","title","body","extraHeaderContent","Main","Container","children","Tasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","buttonsColorActive","App","document","getElementById"],"mappings":"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","file":"static/js/main.cce56573.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, ::after, ::before {\n    box-sizing: inherit;\n  }\n\n  body {\n    display: flex;\n    flex-direction: column;\n    font-family: \"Montserrat\", sans-serif;\n    background-color: rgb(235, 235, 235);\n  }\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    max-width: 1080px;\r\n`;\r\n\r\nexport const Fieldset = styled.fieldset`\r\n    margin: 0 auto;\r\n    border: none;\r\n    display: flex;\r\n    padding: 20px;\r\n    background-color: white;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        padding: 5px;\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    flex-grow:1;\r\n    margin-right: 10px;\r\n    padding: 10px;\r\n    color: black;\r\n    border: 1px solid ${({ theme }) => theme.colors.primaryColor};\r\n    outline-color: ${({ theme }) => theme.colors.buttonsColor};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        margin: 0 0 10px;\r\n    }\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    background-color: ${({ theme }) => theme.colors.buttonsColor};\r\n    color: white;\r\n    padding: 10px;\r\n    border: none;\r\n    cursor: pointer;\r\n    flex-shrink: 0;\r\n    transition: background-color 0.5s, transform 0.5s;\r\n    \r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.colors.buttonsColorHover};\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        background-color: ${({ theme }) => theme.colors.buttonsActive};\r\n    }\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        flex-basis: 100%;\r\n        margin: 5px 0px;\r\n    }\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport default tasksSlice.reducer;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StyledForm, Fieldset, Input, FormButton } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Fieldset>\r\n                <Input\r\n                    ref={inputRef}\r\n                    value={newTaskContent}\r\n                    required\r\n                    placeholder=\"Co jest do zrobienia?\"\r\n                    onChange={({ target }) => setNewTaskContent(target.value)}\r\n                />\r\n                <FormButton>\r\n                    Dodaj zadanie\r\n                </FormButton>\r\n            </Fieldset>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 20px 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: flex;\r\n    padding: 10px 10px;\r\n    align-items: center;\r\n    border-bottom: 1px solid rgb(235, 235, 235);\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    word-break: break-word;\r\n    flex-grow: 1;\r\n    \r\n    ${({ done }) => done && css`\r\n        text-decoration-line: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    height: 30px;\r\n    width: 30px;\r\n    margin: 0 10px;\r\n    border: none;\r\n    color: white;\r\n    flex-shrink: 0;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.colors.doneIconColor};\r\n\r\n        &:hover {\r\n        background-color: ${({ theme }) => theme.colors.doneIconColorHover};\r\n        transition: .5s ease-out;\r\n        }\r\n\r\n        &:active {\r\n        background-color: ${({ theme }) => theme.colors.doneIconColorActive};\r\n        transition: .5s ease-out;\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.deleteIconColor};\r\n    \r\n        &:hover {\r\n        background-color: ${({ theme }) => theme.colors.deleteIconColorHover};\r\n        transition: .5s ease-out;\r\n        }\r\n\r\n        &:active {\r\n        background-color: ${({ theme }) => theme.colors.deleteIconColorActive};\r\n        transition: .5s ease-out;\r\n        }    \r\n    `}\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\nimport { selectTasks, toggleTaskDone, removeTask, selectHideDone } from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑️\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.colors.primaryColor};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    outline: none;\r\n    transition: color .5s ease-out;\r\n    cursor: pointer;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px 0;\r\n    }\r\n    \r\n    &:hover{\r\n        color: ${({ theme }) => theme.colors.buttonsColorHover};\r\n    }\r\n\r\n    &:disabled{\r\n        color: ${({ theme }) => theme.colors.buttonsColorDisabled}\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectAreTasksEmpty, selectHideDone, selectIsEveryTaskDone, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin-bottom: 10px 0;\r\n    background-color: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid rgb(235, 235, 235);\r\n    padding: 20px;\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    margin: 0;\r\n    font-size: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.small}px) {\r\n    text-align: center;\r\n    margin-left: 0;\r\n    }\r\n`;","import { Wrapper, Header, SectionTitle } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      <SectionTitle>{title}</SectionTitle>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    {body}\r\n  </Wrapper>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.div`\r\n    margin: 0 auto;\r\n    padding: 30px;\r\n    max-width: 1080px;\r\n`;","import { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\n\n\nfunction Tasks() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList />}\n        extraHeaderContent={<Buttons />}\n      />\n    </Container>\n  );\n}\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./Theme.js\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        primaryColor: \"teal\",\r\n        buttonsColor: \"teal\",\r\n        buttonsColorHover: \"rgb(0, 175, 175)\",\r\n        buttonsColorActive: \"rgb(0, 200, 200)\",\r\n        buttonsColorDisabled: \"rgb(190, 190, 190)\",\r\n        doneIconColor: \"green\",\r\n        doneIconColorHover: \"rgb(0, 190, 0)\",\r\n        doneIconColorActive: \"rgb(0, 220, 0)\",\r\n        deleteIconColor: \"red\",\r\n        deleteIconColorHover: \"rgb(252, 30, 30)\",\r\n        deleteIconColorActive: \"rgb(255, 60, 60)\",\r\n    },\r\n    breakpoints: {\r\n        small: 767,\r\n    }\r\n};"],"sourceRoot":""}